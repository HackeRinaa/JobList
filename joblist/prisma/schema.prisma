datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  stripeCustomerId String?
  tokens        Int       @default(0)
  subscription  Subscription?
  jobListings   JobListing[]  @relation("CreatedListings")
  applications  Application[]
  profile       Profile?
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  bio         String?
  profession  String?
  location    String?
  rating      Float?
  completedJobs Int     @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subscription {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  stripeSubscriptionId String
  status      SubscriptionStatus
  plan        SubscriptionPlan
  startDate   DateTime  @default(now())
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model JobListing {
  id          String    @id @default(cuid())
  title       String
  category    String
  location    String
  description String
  budget      String
  status      JobStatus @default(PENDING)
  premium     Boolean   @default(false)
  tokenCost   Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customerId  String
  customer    User      @relation("CreatedListings", fields: [customerId], references: [id])
  applications Application[]
  assignedWorkerId String?
}

model Application {
  id          String    @id @default(cuid())
  jobId       String
  workerId    String
  message     String?
  estimatedPrice String?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  job         JobListing @relation(fields: [jobId], references: [id])
  worker      User      @relation(fields: [workerId], references: [id])
}

model TokenPurchase {
  id          String    @id @default(cuid())
  userId      String
  amount      Int
  cost        Float
  stripePaymentId String
  status      PaymentStatus
  createdAt   DateTime  @default(now())
}

enum UserRole {
  CUSTOMER
  WORKER
  ADMIN
}

enum JobStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  PROFESSIONAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
} 